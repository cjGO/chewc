# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/01_structs.ipynb.

# %% auto 0
__all__ = ['SimParam', 'SimConfig', 'Population']

# %% ../nbs/01_structs.ipynb 2
from typing import List, Optional, Dict, Callable, Any

import jax
import jax.numpy as jnp

from typing import Tuple
from numpy.random import default_rng
import msprime
import tskit
import numpy as np
import random
from collections import defaultdict
from flax.struct import dataclass as flax_dataclass, field

#testing
import jax
import jax.numpy as jnp
from fastcore.test import test_eq, test_ne


import jax.numpy as jnp
from flax.struct import dataclass as flax_dataclass, field
from typing import List, Optional, TYPE_CHECKING
from typing import Optional, TYPE_CHECKING

# No need for cached_property anymore for these core attributes
# from functools import cached_property

import jax.numpy as jnp
from flax.struct import dataclass as flax_dataclass, field
from typing import List, Optional, TYPE_CHECKING

# %% ../nbs/01_structs.ipynb 3
# chewc/structs.py


@flax_dataclass(frozen=True)
class SimParam:
    """
    Global, run-constant parameters & metadata.
    Keep only JAX-compatible fields (arrays, tuples, scalars).
    """
    gen_map: jnp.ndarray           # (n_chr, loci_per_chr or ragged handled upstream)
    ploidy: int
    traits: Optional[Any] = None   # e.g., TraitCollection
    recomb_params: tuple = (2.6, 0.0, 0.0)
    var_e: Optional[jnp.ndarray] = None


#| export


# chewc/config.py
from flax.struct import dataclass as flax_dataclass

@flax_dataclass(frozen=True)
class SimConfig:
    """
    Static configuration for the simulation.

    These values are known at compile time and are used to define the shapes
    of the JAX arrays. Pass this as a static arg to JIT'd functions.
    """
    n_chr: int
    ploidy: int
    max_pop_size: int
    n_loci_per_chr: int     # optional but helpful for kernels that need per-chr sizes
    n_generations: int
    n_select: int
    population_size: int    # <-- unified name (was n_offspring)
    retention_generations: int = 1


# In a new or refactored chewc/structs.py
from flax.struct import dataclass
import jax.numpy as jnp

@dataclass(frozen=True)
class Population:
  """A container for the minimal, essential state of all *living* individuals.

  This PyTree represents the fundamental state passed between generations.
  It contains NO derived values (phenotypes, BVs) and NO padding.
  The first dimension of each array (`n_ind`) can change from one
  generation to the next.
  """
  geno: jnp.ndarray   # Shape: (n_ind, n_chr, ploidy, n_loci)
  ibd: jnp.ndarray    # Shape: (n_ind, n_chr, ploidy, n_loci)
  meta: jnp.ndarray   # Shape: (n_ind, 4) -> [id, mother_id, father_id, birth_gen]

