"""Common operations around the core datastructures for running a sim"""

# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/00_pipe.ipynb.

# %% auto 0
__all__ = ['update_pop_values']

# %% ../nbs/00_pipe.ipynb 3
import jax
import jax.numpy as jnp
from jaxtyping import Array, Float

from .population import Population
from .sp import SimParam
from .pheno import set_pheno

def update_pop_values(
    key: jax.random.PRNGKey, 
    pop: Population, 
    sp: SimParam, 
    h2: Float[Array, "nTraits"]
) -> Population:
    """
    Calculates genetic and phenotypic values for a new population.

    This is a common pipeline step after creating progeny, who are born
    with only genotypic information.

    Args:
        key: A JAX random key for phenotypic noise generation.
        pop: The population of new individuals (e.g., progeny).
        sp: The simulation parameters, containing trait information.
        h2: The heritability for the trait(s) being phenotyped.

    Returns:
        A new Population object with updated bv and pheno attributes.
    """
    # Use the existing JIT-compatible function from the pheno module
    # This will calculate gv (and thus bv) and then the phenotype.
    pop_with_values = set_pheno(key, pop, sp.traits, sp.ploidy, h2=h2)
    return pop_with_values

