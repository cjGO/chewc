"""Fill in a module description here"""

# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/09_popgen.ipynb.

# %% auto 0
__all__ = ['genetic_map', 'founder_haplotypes', 'mts', 'create_rate_map', 'msprime_pop', 'visualize_founder_maf']

# %% ../nbs/09_popgen.ipynb 4
import msprime
import tskit
import numpy as np
import random
from collections import defaultdict
import matplotlib.pyplot as plt

def create_rate_map(chromosome_lengths, recombination_rate):
    """Creates a msprime.RateMap for a genome with multiple chromosomes."""
    positions = [0] + list(np.cumsum(chromosome_lengths))
    if isinstance(recombination_rate, (int, float)):
        rates = [recombination_rate] * len(chromosome_lengths)
    elif isinstance(recombination_rate, list) and len(recombination_rate) == len(chromosome_lengths):
        rates = recombination_rate
    else:
        raise ValueError("recombination_rate must be a single value or a list of the same length as chromosome_lengths")
    return msprime.RateMap(position=positions, rate=rates)

def msprime_pop(num_founders_to_return, num_snps_per_chromosome):
    """
    Generates a founder population from a standard msprime simulation.

    Args:
        num_founders_to_return (int): The number of individuals to randomly sample
                                      from the simulation to act as founders.
        num_snps_per_chromosome (int): The number of SNPs to select from each chromosome.

    Returns:
        tuple: A tuple containing:
            - genetic_map (np.ndarray): A 2D array of SNP positions in cM.
            - founder_haplotype_matrix (np.ndarray): A 4D array of founder genotypes.
            - mts (tskit.TreeSequence): The full simulated tree sequence.
    """
    # --- Hardcoded Simulation Parameters ---
    num_simulated_individuals = 500
    effective_population_size = 10_000
    mutation_rate = 2e-8
    chromosome_lengths = [1_500_000, 1_000_000, 500_000]
    recombination_rate_per_chr = 2e-8
    maf_threshold = 0.1
    random_seed = 42
    # --- End of Hardcoded Parameters ---
    
    n_chr = len(chromosome_lengths)
    print(f"üß¨ Simulating a base population of {num_simulated_individuals} diploid individuals...")
    print(f"üéØ Attempting to select {num_snps_per_chromosome} SNPs from each of the {n_chr} chromosomes.")
    print(f"üë• Returning a random sample of {num_founders_to_return} individuals as founders.\n")

    if num_founders_to_return > num_simulated_individuals:
        raise ValueError("The number of founders to return cannot exceed the number of simulated individuals.")

    num_haplotypes = num_simulated_individuals * 2
    rate_map = create_rate_map(chromosome_lengths, recombination_rate_per_chr)

    ts = msprime.sim_ancestry(
        samples=num_haplotypes, population_size=effective_population_size,
        recombination_rate=rate_map, random_seed=random_seed
    )
    mts = msprime.sim_mutations(ts, rate=mutation_rate, random_seed=random_seed)

    true_num_individuals = mts.num_samples // 2
    all_variants = list(mts.variants())
    
    genetic_map = np.full((n_chr, num_snps_per_chromosome), np.nan)
    full_haplotype_matrix = np.full(
        (true_num_individuals, n_chr, 2, num_snps_per_chromosome), np.nan
    )

    for i in range(n_chr):
        chr_start, chr_end, recomb_rate = rate_map.left[i], rate_map.right[i], rate_map.rate[i]

        eligible_snps = [
            var for var in all_variants 
            if chr_start <= var.site.position < chr_end and len(var.alleles) == 2 and min(np.mean(var.genotypes), 1 - np.mean(var.genotypes)) > maf_threshold
        ]
        
        num_found = len(eligible_snps)
        if num_found < num_snps_per_chromosome:
            print(f"‚ö†Ô∏è  Warning: Chromosome {i+1} only has {num_found} SNPs meeting the MAF threshold (requested {num_snps_per_chromosome}). Using all available.")
        
        num_to_select = min(num_found, num_snps_per_chromosome)
        
        if num_to_select > 0:
            selected_snps = random.sample(eligible_snps, num_to_select)
            selected_snps.sort(key=lambda v: v.site.position)

            for snp_idx, snp in enumerate(selected_snps):
                genotypes_for_snp = snp.genotypes.reshape(true_num_individuals, 2)
                full_haplotype_matrix[:, i, :, snp_idx] = genotypes_for_snp
            
            positions_cm = [(v.site.position - chr_start) * recomb_rate * 100 for v in selected_snps]
            genetic_map[i, :num_to_select] = positions_cm

    founder_indices = np.sort(random.sample(range(true_num_individuals), num_founders_to_return))
    founder_haplotype_matrix = np.array(full_haplotype_matrix[founder_indices, :, :, :], dtype='uint8')

    return genetic_map, founder_haplotype_matrix, mts

def visualize_founder_maf(founder_haplotypes):
    """
    Calculates and visualizes the Minor Allele Frequency (MAF) distribution
    for the founder population.
    """
    print("\n--- Visualizing Founder MAF Distribution ---")
    
    num_founders = founder_haplotypes.shape[0]
    num_alleles = num_founders * 2

    allele_counts = np.sum(founder_haplotypes, axis=(0, 2))
    allele_freq = allele_counts / num_alleles
    maf = np.minimum(allele_freq, 1 - allele_freq)
    
    maf_flat = maf.flatten()
    valid_maf = maf_flat[~np.isnan(maf_flat)]
    
    if valid_maf.size == 0:
        print("‚ùå No valid SNPs found to visualize MAF.")
        return

    plt.figure(figsize=(10, 6))
    plt.hist(valid_maf, bins=20, color='darkcyan', edgecolor='black')
    plt.title(f'Minor Allele Frequency (MAF) Distribution in {num_founders} Founders', fontsize=16)
    plt.xlabel('Minor Allele Frequency', fontsize=12)
    plt.ylabel('Number of SNPs', fontsize=12)
    plt.grid(axis='y', alpha=0.75)
    plt.xlim(0, 0.5)
    print(f"üìä Plotted histogram for {valid_maf.size} SNPs.")
    plt.show()


genetic_map, founder_haplotypes, mts = msprime_pop(
    num_founders_to_return=50,
    num_snps_per_chromosome=100
)

# --- Final Verification ---
print("\n--- Verification of Final Founder Matrix Shapes ---")
if founder_haplotypes is not None:
    print(f"‚úÖ Founder Haplotype Matrix Shape (Ind, Chr, Diploid, SNPs): {founder_haplotypes.shape}")
else:
    print("‚ùå Founder Haplotype Matrix could not be generated.")

if genetic_map is not None:
    print(f"‚úÖ Genetic Map Shape (Chr, SNPs): {genetic_map.shape}\n")
else:
    print("‚ùå Genetic Map could not be generated.\n")

# --- Visualize the MAF of the returned founders ---
visualize_founder_maf(founder_haplotypes)
